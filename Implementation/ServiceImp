using Microsoft.EntityFrameworkCore;
using Software_Solutions.Data;
using Software_Solutions.DTO;
using Software_Solutions.Interface;
using Software_Solutions.Models;

namespace Software_Solutions.Implementation
{
    public class ServiceImp : IService
    {
        private readonly AppDbContext _context;
        public ServiceImp(AppDbContext context)
        {
            _context = context;
        }

        public async Task<List<Service>> GetAllServices()
        {
            return await _context.Services.ToListAsync();
        }

        public async Task<Service?> GetServiceById(int id)
        {
            return await _context.Services.FindAsync(id);
        }

        public async Task<Service> CreateService(ServiceDto dto)
        {
            var service = new Service
            {
                Title = dto.Title,
                Description = dto.Description,
                EstimatedTime = dto.EstimatedTime,
                Price = dto.Price,
                Category = dto.Category,
                ImageUrl = dto.ImageUrl
            };

            _context.Services.Add(service);
            await _context.SaveChangesAsync();
            return service;

        }

        public async Task<bool> UpdateService(int id, ServiceDto dto)
        {
            var service = await _context.Services.FindAsync(id);
            if(service == null) return false;

            service.Title = dto.Title;
            service.Description = dto.Description;
            service.Price = dto.Price;
            service.EstimatedTime = dto.EstimatedTime;
            service.Category = dto.Category;

            await _context.SaveChangesAsync();
            return true;

        }


        public async Task<bool> DeleteService(int id)
        {
            var service = await _context.Services.FindAsync(id);
            if (service == null) return false;

            _context.Services.Remove(service);

           await _context.SaveChangesAsync();
            return true;

        }

    }
}
